$().ready(function(){
  $("button.ok").click(function(){
    tr = $(this).parents('tr.dataodd', 'tr.dataeven');
  });
});


/*
 * This script sets up inplace editing
 */

  $().ready(function(){
    $('.best_in_place').best_in_place();
  });
   //This script is for overrides of the best in place functionality
  $().ready(function(){
    $(".ok").click(function(){
      return false;
    });
    
  });
/*
 * This script sets up the selection mode radio buttons
 */
  $(function(){
    $( "div#selection_mode" ).buttonset();
  });
  
/*
 * Script enlarges and restores editing index for translations
 */

  var maximiseSelector = 'img#maximise';
  var minimiseSelector = 'img#minimise'; 
  var headerDiv ='div#appheader';
  var appMenuSelector = 'td#appmenutd';
  var appMainSelector ='#appmaintd';
  var appMainContainerDivSelector = '#container';
  $().ready(function(){
    $(maximiseSelector).show();
    $(minimiseSelector).hide();
    
    $(maximiseSelector).click(function(){
      toggleHeaderMenu();
      toggleMaxMinImages();
    });
    
    $(minimiseSelector).click(function(){
      toggleHeaderMenu();
      toggleMaxMinImages();
    });
  });//ready 
  function toggleHeaderMenu(){
    $(headerDiv).toggle();
    $(appMenuSelector).toggle();
  };
  function toggleMaxMinImages(){
    $(maximiseSelector).toggle();
    $(minimiseSelector).toggle();
  };
  function toggleContainerPadding(){
    padding = $(appMainContainerDivSelector).css("padding");
    if(padding == '0'){
      $(appMainContainerDivSelector).css("padding", "20px 40px");
    } else{
      padding = '0';
    }
  };
  

 /* 
   *This script enables jquery ui sortable functionality for ul with id sortable
   */
  $(function() {
    $( sortableUlSelector ).sortable();
    $( sortableUlSelector ).disableSelection();
  });
  
  /*
   * returns an li for a ul. Used for the sortable array.order dot_key_code
   */
  var itemList = function(val, html){
      console.log("itemList");
      return $('<li/>', {class: "ui-state-default",
                         html: html, style: "margin: 3px; padding-left:3px;"}) ;
  };
  var specialEditorSpan = "span.special_editor";
  var pluralEditorSpan = "span.plural_editor";
  var anchorSelector = specialEditorSpan + ", " + pluralEditorSpan;  
  var saveButtonSelector =   "input#ok-special-editor";
  var cancelButtonSelector = 'button#cancel-special-editor';
  var originalTranslationSelector = 'input#original_translation';
  //var idInputSelector = 'input#id';
  var dotKeyCodeInputSelector = 'input#dot_key_code';
  var sortableUlSelector = 'ul#sortable';
  
  var translationSelector = 'input#translation_translation'; 
  var allSortableUlsSelector = 'ul#sortable';
  var hintDivSelector ="div#special-editor-hints";
  var formSelector = "#edit_translation";
  var editorNameSelector = 'input#editor-name';//"input#editor";
  
  var englishTranslationSelector = 'input#english';
  var arrayEditingTableSelector = 'table#array-special-editor';
  var pluralEditingTableSelector =  'table#plural-editing'; 
  var containerSelector = 'td.editor-container'; 
/*
 * Sets each piece of data into a li inside the targetContainer after removing existing
 */    
  var setOrderData = function(targetContainer, array){
    if($(targetContainer).children().length != 0){
      targetContainer.empty();
    } 
    $.each(array,function(index ,text){
        console.log("setOrderData each");
        //$("ul#sortable").append(itemList('', value));
        $(targetContainer).append(itemList('', text));
    });
  };
  
  var setArrayData = function(targetContainer, array, englishTranslationArray, first_element_null){
    first_element_null = (englishTranslationArray[0] == null);
    if($(targetContainer).children().length != 0){
      targetContainer.empty();
    }
    //if(typeof englishTranslation !== "undefined"){ 
    html = '';
    row_style_for_null = "style='display:none;'";
    $.each(englishTranslationArray,function(index ,en_text){
      
      html = html + '<tr'+ ((first_element_null &&index == 0   )?(" " + row_style_for_null) : "")  + '><td>' + en_text +'</td><td>' + "<input class = 'array-element' type='text' value ='" + array[index] + "'/>" + '</td></tr>' ;
      
    });  
    //html = html + ""
    $(targetContainer).prepend(html);//.html();
    //}
  };  
 
  var closeOthers = function(event){
    result = $("button.ok, input#ok-special-editor").filter(":visible");
    $.each(result, function(index, value){
      td = $(value).closest(containerSelector);
      cancel($(td));
    });
    return true;
  };

  $().ready(function(){
    $('span.best_in_place').on('mousedown',closeOthers);
    $(specialEditorSpan).on('mousedown',closeOthers); 
    $(pluralEditorSpan).on('mousedown',closeOthers);
    $(allSortableUlsSelector).css('display','none'); 
    $(anchorSelector).click(function(event){
       anchor = $(this);
       containerTd = anchor.closest(containerSelector);
       children = getTdChildren(containerTd);
       if(typeof children['editorName'] == 'undefined'){
         // do nothing
       }else if(children['editorName'] == 'array_order'){
         setOrderData(children['ul'], $.parseJSON(decodeURI(encodeURI(anchor.text()))));  
         children['ul'].css("display", "block");
       }else if(children['editorName'] == 'plural'){
           children['table'].css("display", 'table');
           console.log("end_plural");
       }else if(children['editorName'] == 'array' || children['editorName'] == 'array_first_element_null'){
         setArrayData(children['table'],$.parseJSON(decodeURI(encodeURI(anchor.text()))), children['englishTranslation'] );
         children['table'].css("display", 'table');    
       }else{
       }
       anchor.css("display", "none");
       children['form'].css("display", 'block');
       children['saveButton'].css("display", 'inline');
       children['cancelButton'].css("display", 'inline'); 
       children['hint'].css("display", 'inline'); 
    }); //end anchor
    $('.best_in_place').on("ajax:success", function (event, data, status, xhr) {
      
          success($(this).closest('tr').find('#local-flash'));
          
     }).on("ajax:error", function(e, xhr, status, error){
      alert("ajax error from on button");
    });
    
    
    $(saveButtonSelector).click(function(event){
      console.log("in save click");
      return save(event);
    });
    
    $(cancelButtonSelector).click(function(event){

      return cancel($(this).closest(containerSelector));
    });  

  }); //end ready
  
  function success(object){
      object.html('Sweet').css("background-color", 'palegreen');
      timer(object);
  }
  function error(object){
    object.html('Update Failure').css("background-color", 'pink'); 
    timer(object);
  }
  function timer(object){
    timeoutID = window.setTimeout(function(){object.empty();},10000);
  }
    
  var save = function(event){
    containerTd = parentTd(event);
    children = getTdChildren(containerTd);
    array = [];
    hash = {};
    object = null;
    if(typeof children['editorName'] == 'undefined'){
       // do nothing
    }else if(children['editorName'] == 'array_order'){ 
       lis = children['ul'].children('li') ;
       $.each(lis,function(index ,value){
         array.push(value.textContent);
       });
       object = array;
    }else if(children['editorName'] == 'array' || children['editorName'] == 'array_first_element_null'){
       inputs = children.table.find('input.array-element');
       $.each(inputs, function(index, input){
         array.push($(input).val());
       });
       object = array;   
    }else if(children['editorName'] == 'plural'){
       //hash = {};
       rows = children.table.find('tr');
       $.each(rows, function(index, value){
          tds = $(value).find('td');
          key = $(tds[0]).html();
          trans_object = $(tds[1]).find('textarea');
          if(trans_object == null){
            trans_object = $(tds[1]).find('input');
          } 
          val = $(trans_object).val();
          hash[key] = val;
       });
       object = hash;             
    }else{
      object = ''; 
    }

      update = JSON.stringify(object);
      children["translation"].val(update);
      children['anchor'].text(update) ;
      restoreTd(containerTd);
      return true;
  };
  var cancel = function(containerTd){
    console.log("in cancel ");
    children = getTdChildren(containerTd);
    restoreTd(containerTd);
    if(typeof children['editorName'] == 'undefined'){
       // do nothing
    }else if(children['editorName'] == 'array_order'){
      setOrderData(children['ul'], $.parseJSON(decodeURI(encodeURI(children['originalTranslation'][0].value))));
    }else if(children['editorName'] == 'array' || children['editorName'] == 'array_first_element_null'){
       console.log(children['originalTranslation']);
       if($(children["table"]).children().length != 0){
         $(children["table"]).empty();
       }
    }else if(children['editorName'] == 'plural'){
      console.log(children['originalTranslation']);
      hash = JSON.parse(children['originalTranslation'].val());
       rows = children.table.find('tr');
       $.each(rows, function(index, value){
         tds = $(value).find('td');
         key = $(tds[0]).html();
         textarea = $(tds[1]).find('textarea');
         $(textarea).val(hash[key]);
      });
    }else{
      
    }
    return true;
  };
  
  var parentTd = function(event){
    return $(event.target).closest(containerSelector)[0];
  };
  
  var restoreTd = function(td){
    console.log("in restor td");
    children = getTdChildren(td);
    children['anchor'].css("display", "inline");
    children['form'].css("display", 'none');
    children['saveButton'].css("display", 'none');
    children['cancelButton'].css("display", 'none');
    children['hint'].css("display", 'none');
    console.log(typeof children['ul']);
    console.log(typeof children['div']); 
    console.log(typeof children['table']);    
    if(typeof children['ul'] != 'undefined'){
      children['ul'].css("display", 'none');
    }else if(typeof children['table'] != 'undefined'){
      children['table'].css("display", 'none');
      
    }else{
      
    }   
  };
  /*
   * @param td the cell in which the objects for a translation update are contained
   * @return a hash of the objects in the td, except for the editorName which is the string from the editorName object.
   * We need to return a string in the case of editorName because the value only appears as a defaultValue. 
   * Only the text of the editorName object is required. 
   */
  var getTdChildren = function(td){
    td = $(td);
    anchor = td.find(anchorSelector);
    form = td.find('form');
    //div = td.find(specialEditorDivSelector);
    
    saveButton = td.find(saveButtonSelector);
    cancelButton = td.find(cancelButtonSelector);
    originalTranslation = td.find(originalTranslationSelector);
    //id = td.find(idInputSelector);
    dotKeyCode = td.find(dotKeyCodeInputSelector);
    translation = td.find(translationSelector);
    hint = td.find(hintDivSelector);
    editorName = td.find(editorNameSelector)[0].defaultValue;
    
    englishJson = td.find(englishTranslationSelector)[0].value;
    english = $.parseJSON(decodeURI(encodeURI(englishJson)));
    ul = undefined;
    div = undefined;
    table = undefined;
    
    if(editorName == 'array_order' ){
      ul = td.find(sortableUlSelector);
    }else if(editorName == 'array'){
      table = td.find(arrayEditingTableSelector); 
    }else if(editorName == 'array_first_element_null'){
      table = td.find(arrayEditingTableSelector);
    }else if(editorName == 'decimal_format'){
         //Taken care of by best in place now
    }else if(editorName == 'time_format'){
         //Taken care of by best in place now         
    }else if(editorName == 'date_format'){ 
          //Taken care of by best in place now
    }else if(editorName == 'datetime_format'){
      
    }else if(editorName == 'plural'){
      table = td.find(pluralEditingTableSelector);
    }else{
      
    }    
    return {saveButton: saveButton, 
            cancelButton: cancelButton, 
            form: form, 
            ul: ul,
            div: div, 
            table: table,
            anchor: anchor, 
            //id: id, 
            dotKeyCode: dotKeyCode, 
            originalTranslation: originalTranslation, 
            translation: translation,
            hint: hint,
            editorName: editorName,
            englishTranslation: english };
  };