<%= semantic_form_for(@redis_database) do |f| %>
  <script type="text/javascript">
  /**
   * This script allows the proper editing of redis instance and redis database index
   * Since we are not following Mr Codd here we need complex js to ensure that the index is permitted
   * for that instance of redis (within the max number of databases) and that the index that is chosen 
   * is not
   * being used by another app version.
   * If the user is in an edit situation then and changes instance and then changes back to 
   * the original instance then the
   * same database is still used.
   * If the user wants to change the index of a database then he must delete the first database 
   * (use delete function in the index page)
   * and recreate a new database.
   * 
   * The data is cleared from a redis database on insert of a new database from this form.
   * It is not a big deal if a redis database is lost as the data will always be publishable 
   * from the postgres db.
   * redis db 0 is used to store admin info: 
   */
  
  RDB.Form= function(){
    
  };
  //RDB.Form.redisDatabaseIndex = '#redis_database_redis_db_index';
  //RDB.Form.redisDatabaseIndex = '#db_redis_id';
  RDB.Form.redisInstanceSelectSelector ='#redis_database_redis_instance_id';
	RDB.Form.dbIndexSelectSelector = '#redis_database_redis_db_index'; //"select[name='redis-database[redis_db_index]']";
	RDB.Form.selectDbIndexAllOptionsSelector =RDB.Form.dbIndexSelectSelector + ">option";
	RDB.Form.dbIndex = -1;
	RDB.Form.instanceId = -1;
	//RDB.Form.dbIndex
	$(document).ready(function(){
	  //init the pre data for the change function
	  $(RDB.Form.redisInstanceSelectSelector).data('pre', $(this).val());
	  $(RDB.Form.redisInstanceSelectSelector).change( function(event){
	    var before_change = $(this).data('pre');//get the pre data
	    console.log( "change1");
	    //checkDbIndex('redisinstancechange');
	    populateDbIndexSelect();
	    checkDbIndex("redisinstancechange")
	    //console.log( "dbIndex " + dbIndex);
	    $(this).data('pre', $(this).val());//update the pre data
	  });
	  //In an edit situation, we preserve the original instande and db, so that we can put it back if the user changes his mind
	  RDB.Form.dbIndex = $(RDB.Form.dbIndexSelectSelector).val();
	  RDB.Form.instanceId = $(RDB.Form.redisInstanceSelectSelector).val(); 
	  checkDbIndex('');
    
    if( ($('#status').val() == 'new') && (RDB.Form.instanceId != "")){
        populateDbIndexSelect(); 
    }
	  //console.log( 'status =' +$('#status').val() + 'xx ready');
	  //console.log("ready");
	});
	
	function isRedisInstanceSelected(){
	  return $(RDB.Form.redisInstanceSelectSelector + " option:selected").text()!="";
	}
	
	function checkDbIndex(type){
	  if($('#status').val() == 'edit'){
	    //if(isRedisInstanceSelected()){
	      //if( type== 'redisinstancechange'){
    	    //disableInstanceAndDbIndex( false);
    	    //populateDbIndexSelect();
    	    //console.log( "if disable from status edit"  );
  	    //}else{
  	      disableInstanceAndDbIndex(true, true);
  	    //}// end if instancechange
	    //}else{
	      //disableInstanceAndDbIndex(false, true);
	    //} //end if redisInstanceSelected
	  }else{ 
	    //This is status new
  	  if(isRedisInstanceSelected()){
  	      //console.log( "if enable");
          disableInstanceAndDbIndex(false, false);
          $(RDB.Form.dbIndexSelectSelector).val("");
      }else{
          disableInstanceAndDbIndex(false, true);
          //console.log( "else disable"  );
      }
    } //end if status edit
	}//end fn checkDbIndex
	
	function disableInstanceAndDbIndex(instanceDisable, indexDisable){
	  $(RDB.Form.redisInstanceSelectSelector).prop('disabled', instanceDisable);
	  $(RDB.Form.dbIndexSelectSelector).prop('disabled', indexDisable);
	}   
	
	function populateDbIndexSelect(){
    var unusedIndexArray = null;
    //var redisInstanceId '';
    console.log($(RDB.Form.redisInstanceSelectSelector).val() + "yyy");
    //if($(dbIndexSelectSelector).length==0){
      //console.log(" select box doesn't exist");
    //}else{
    $(RDB.Form.selectDbIndexAllOptionsSelector).remove();  
    console.log( "options removed");
    if(isRedisInstanceSelected()){  
      //console.log("instance_selected");
      if( $(RDB.Form.redisInstanceSelectSelector).val()){
         console.log("instance has val");
         var redisInstanceId= $(RDB.Form.redisInstanceSelectSelector).val();
         console.log("instance_id = " + redisInstanceId );
         
         var url = "<%= redis_databases_getunused_path %>";
         console.log(url);
         data = {redis_instance_id : redisInstanceId   };
         $.ajax( {
                       url:     url   ,
                       async : true,
                       type:       "GET", 
                       dataType:   "json",
                       data:       data,
                       complete:    function() {
                         console.log("pop complete");
                                       //This function is not needed
                                    },
                       success:    function(data, textStatus, xhr)   {
                                      console.log("pop success");
                                      unusedIndexArray = data
                                      console.log("data = " +data);
                                      unusedIndexArray.splice(0,0,'');
                                      $.each(unusedIndexArray, function( intIndex, objValue ){
                                 
                                        // Create a new option HTML element out of the
                                        // current value (in the iteration) and then
                                        // add this value to the list.
                                        //console.log("options " + objValue);
                                        $(RDB.Form.dbIndexSelectSelector).append($( "<option ></option>" ).val(objValue).html(objValue));
                                        //);
                                         //$(RDB.Form.dbIndexSelectSelector).addOption(objValue,objValue);
                                        }//end each function
                                      );//end each
                                      //We must be careful to set the index back to what it was if the user sets the same instance again
                                     //if($(RDB.Form.redisInstanceSelectSelector).val()==RDB.Form.instanceId){
                                           //$(RDB.Form.redisDatabaseIndex).val(RDB.Form.dbIndex);
                                           //disableDbIndex(true);
                                     //}else{
                                        //$(RDB.Form.dbIndexSelectSelector).val('');
         //}
                                    },
                      error:      function(request, status, error) {
                                     console.log("pop error");
                                    //This callback will handle errors on the server but not errors in the success callback
                                    //@todo put the reponse text in a web page
                                    alert(request.responseText);
                                  },
                     });//end ajax
                     //console.log(unusedIndexArray.class());
                     
         /*if($('#status').val()=='edit'){
           console.log("edit: arry " + unusedIndexArray + ' dbIndex ' +RDB.Form.dbIndex); 
           unusedIndexArray.splice(0,0,RDB.Form.dbIndex);
           console.log(' new array ' + unusedIndexArray);
         }*/
        /* mlml
         unusedIndexArray.splice(0,0,'');
         $.each(unusedIndexArray, function( intIndex, objValue ){
 
        // Create a new LI HTML element out of the
        // current value (in the iteration) and then
        // add this value to the list.
        //console.log("options " + objValue);
        $(RDB.Form.selectDbIndex).append($( "<option ></option>" ).val(objValue).html(objValue));
        //); 
               }//end function
         );//end each
          //We must be careful to set the index back to what it was if the user sets the same instance again
         if($(RDB.Form.redisInstanceSelect).val()==instanceId){
               $(RDB.Form.redisDatabaseIndex).val(dbIndex);
               disableDbIndex(true);
         }else{
            $(RDB.Form.redisDatabaseIndex).val('');
         }
        }//end val 
      }else{
      */ 
         } // selected has value 
      }//end selected
      
      //return unusedIndexArray;
    }//end populate
	
	</script>

	<% if locals[:state] == "new" then %>
	  <input type='hidden' id= "status" value= 'new'/>
	<% elsif locals[:state] == "edit" then %>
	  <input type='hidden' id= "status" value= 'edit'/>
	<%end%>
	<%= f.inputs do %>
	       
	      <!--%if not locals[:master_detail] then %>
           < %= f.input :calmapp_version_id, :as=>:select,:collection=> CalmappVersion.all.collect {|p| [ p.calmapp_name_with_version, p.id ]} %>
        < %end%> 
				   < %= f.input :release_status_id, :required=>true, :include_blank=>false, :as =>:select, :collection=> ReleaseStatus.all.collect {|p| [ p.status, p.id ]}  % -->
				   
				   <%= f.input :redis_instance_id,  :include_blank=>true, :as=>:select,:collection=> RedisInstance.all.collect {|p| [ p.description, p.id ]} %>
           <!--% if @redis_database.redis_db_index.nil? then %--> 
             <!--%= f.input :redis_db_index, :as=> :select, :collection=>[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] %-->
             <!--%binding.pry% -->
             <%= f.input(:redis_db_index , :as=> :select, :collection=> locals[:state]=="edit"?((RedisInstance.find(@redis_database.redis_instance_id).unused_redis_database_indexes + [@redis_database.redis_db_index]).sort!) : [], 
                      :input_html=>{:name=>"redis_database[redis_db_index]", :id=>"redis_database_redis_db_index"}, :hint=> (locals[:state]=="edit"?t($FH + "redis_database.redis_db_index_edit") : t($FH + "redis_database.redis_db_index_new")))%>
           <!--%end% --> 
           <!--,:collection=> RedisInstance.unused_databases()-->
				     
				  
		
	<% end %>


	<%= f.actions do %>
      <%= f.action(:submit)  %>    
  <% end %>
<% end %>

