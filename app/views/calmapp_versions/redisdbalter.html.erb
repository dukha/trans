<%=theading("edit_with_redis_databases", :model=>@calmapp_version.name, :count=>1) %>
<%= semantic_form_for(@calmapp_version) do |f| %>
  
	<%= f.inputs do %>
				   <!-- %= f.input :calmapp_id, :as=>:select,:collection=> Calmapp.all.collect {|p| [ p.name, p.id ]}, :input_html => {:disabled=>'disabled'}      %>
				   < %= f.input :version  , :input_html => {:disabled=>'disabled'} % -->
				   <li style="color:red;font-size:150%"><%=@calmapp_version.name.titlecase%> </li>
     <%end%>   
        <%= f.inputs :name=>t( "headings.redis_database.publishing"), :id=>"redis_database" do %>
        <!--div id="cavtd" -->
          <%=f.semantic_fields_for :redis_databases do |rd| %> 
           <!--%binding.pry% -->
                 <div id = "table" style="display:table">
                   <div id= "header-row" style="display:table-row"> <div style="display:table-cell">Release Status</div><div style="display:table-cell">Redis Instance</div><div style="display:table-cell">Redis db index</div></div>
                 <%=render :partial => 'shared/calmapp_versions_redis_database_form2', :locals=>{:f=>rd}%>
                 </div>
                 <!--%= render :partial=>'calmapp_versions/calmapp_version_simple_details', :locals=>{:f=> cav}  % -->            
          <%end%> 
          
           <li class='nesting-add-fields'>
             <!--%binding.pry% -->
                 
                <%= link_to_add_association t($FA + 'add_redis_database'), f, :redis_databases,
                
                {:partial =>  'shared/calmapp_versions_redis_database_form2',
                  'data-association-insertion-method' => "before"#,
                  #:wrap_object => Proc.new {|calmapp_version| calmapp_version.build_redis_database; calmapp_versions_redis_database 
                  }
                  %>  
                  
<!--,         
              'data-association-insertion-node' => "div#calmapp_versions_redis_database", 
                'data-association-insertion-method' => "append", 
                :wrap_object => Proc.new {|calmapp_versions_redis_database| calmapp_versions_redis_database.build_redis_database; calmapp_versions_redis_database }
            --> 
           </li>
            
            <!--%=f.semantic_errors "calmapp_versions_redis_database.calmapp_version_id"% -->
            <%=f.semantic_errors :calmapp_id%>
            <%=f.semantic_errors :calmapp%>

          <!--/div -->
       <%end%> <!-- redis dbs -->

	<%= f.actions do %>
      <%= f.action(:submit, :button_html=> {:id=>"submit-cav-form"})  %>    
  <% end %>
<% end %>
<%= tlink_to( "back_to_versions", calmapp_versions_path) %> | <%= tlink_to( "back_to_redis_databases", redis_databases_path) %>

<script>
  /*
         * Begin getting and setting redis_db_index
         */ 
         var lastIndexes = { };
         /**
          * @param object is the div container for the fields to do with 1 redis database
          */
         /*var redisDbIndexSelector = function(object){calmapp_versions_translation_language
           return $(object).parent("li").siblings("li").find("#redis_db_index");
         }*/
            //$(this).parent("li").siblings("li").find("#redis_db_index");
         /**
          * getNextRedisDbIndex() uses and an ajax call to retrieve the next available index from server
          * @param redisInstanceId is the id of the redis instance
          */
         var getNextRedisDbIndex = function(redisDbIndexObject, redisInstanceId){
            url = "<%= redis_databases_getnextindex_path %>";
            instanceId  = redisInstanceId;
            console.log(url);
            data = {redis_instance_id : redisInstanceId,
                    last_index : lastIndexes[redisInstanceId] == null ? -1 : lastIndexes[redisInstanceId] };//{redis_instance_id : redisInstanceId};
            console.log(data);
            dbIndexObject = redisDbIndexObject;
            $.ajax( {
                       url:     url   ,
                       async : true,
                       type:       "GET", 
                       dataType:   "json",
                       data:       data,
                
                       success:    function(data, textStatus, xhr)   {
                                      console.log("pop success");
                                      unusedIndexArray = data
                                      console.log("data = " + data);
                                      console.log("success url " +url);
                                      $(dbIndexObject).val(data);
                                      lastIndexes[instanceId] = isNaN(data) ? 1000000 : parseInt(data);
                                      /*unusedIndexArray.splice(0,0,'');
                                      $.each(unusedIndexArray, function( intIndex, objValue ){
                                 
                                        // Create a new option HTML element out of the
                                        // current value (in the iteration) and then
                                        // add this value to the list.
                                        //console.log("options " + objValue);
                                        $(RDB.Form.dbIndexSelectSelector).append($( "<option ></option>" ).val(objValue).html(objValue));
                                        //);
                                         //$(RDB.Form.dbIndexSelectSelector).addOption(objValue,objValue);
                                        }//end each function
                                      );//end each
                                      //We must be careful to set the index back to what it was if the user sets the same instance again
                                     //if($(RDB.Form.redisInstanceSelectSelector).val()==RDB.Form.instanceId){
                                           //$(RDB.Form.redisDatabaseIndex).val(RDB.Form.dbIndex);
                                           //disableDbIndex(true);
                                     //}else{
                                        //$(RDB.Form.dbIndexSelectSelector).val('');
         //}*/
                                    },
                      error:      function(request, status, error) {
                                     console.log("Mark");      
                                    //This callback will handle errors on the server but not errors in the success callback
                                    //@todo put the reponse text in a web page
                                     alert(request.responseJSON.error);
                                  },
                     });//end ajax
          } ;
         
          /**
           * setRedisDbIndex() sets the in the form
           * @param dbIndex is the index to set
           */
          var setRedisDbIndex = function(dbIndexObject, dbIndexValue){
            //console.log(dbIndex);
            $(dbIndexObject).val(dbIndexValue)
          };
          /*
         $('form').on('cocoon:after-insert',function(e, insertedItem) {
            console.log(insertedItem.find('select#redis_instance_id'));
            //var redisDbIndexInput = $(this).parent("li").siblings("li").find("#redis_db_index");//redisDbIndexSelector(this);
            //console.log(redisDbIndexInput);
            //console.log($(redisDbIndexInput));
            $(insertedItem.find('select#redis_instance_id')).change(function(e){
              var listItemSiblingsObjects = $(this).parent("li").siblings("li")
              var redisInstanceSelect = $(this);//$(listItemSiblingsObjects).find("#redis_instance_id");
              
              var redisDbIndexInput = $(listItemSiblingsObjects).find("#redis_db_index");//redisDbIndexSelector(this);
              
              console.log($(this).children( "option:selected"));
              if( $(this).children( "option:selected").text() == ''){
                //redisDbIndexInput.val(''); 
                console.log("text empty");
                setRedisDbIndex(redisDbIndexInput, '');
              }else{
                //setRedisDbIndex(redisDbIndexInput, 100);
                getNextRedisDbIndex(redisDbIndexInput, $(redisInstanceSelect).val());
                
              }
            });
          }); //end bind/on
          */
    $(document).ready(function() { 
         console.log("in Doc ready " + $('div#table').toString());    
         $('form.formtastic').on('cocoon:after-insert',function(e, insertedItem) {
            console.log(insertedItem.find('select#redis_instance_id'));
            //var redisDbIndexInput = $(this).parent("li").siblings("li").find("#redis_db_index");//redisDbIndexSelector(this);
            //console.log(redisDbIndexInput);
            //console.log($(redisDbIndexInput));
            $(insertedItem.find('select#redis_instance_id')).change(function(e){
              var listItemSiblingsObjects = $(this).parent("div").siblings("div")
              var redisInstanceSelect = $(this);//$(listItemSiblingsObjects).find("#redis_instance_id");
              
              var redisDbIndexInput = $(listItemSiblingsObjects).find("#redis_db_index");//redisDbIndexSelector(this);
              
              console.log($(this).children( "option:selected"));
              if( $(this).children( "option:selected").text() == ''){
                //redisDbIndexInput.val(''); 
                console.log("text empty");
                setRedisDbIndex(redisDbIndexInput, '');
              }else{
                //setRedisDbIndex(redisDbIndexInput, 100);
                getNextRedisDbIndex(redisDbIndexInput, $(redisInstanceSelect).val());
                
              }
            });
          }); //end bind/on
          /*$('a.add_fields').click(function(){
            $(this).text("testtest");
            console.log("adding...");
            return true;
          });*/
        });  
</script>
