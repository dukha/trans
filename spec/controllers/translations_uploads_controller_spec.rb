require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe TranslationsUploadsController do

  # This should return the minimal set of attributes required to create a valid
  # TranslationsUpload. As you add validations to TranslationsUpload, be sure to
  # adjust the attributes here as well.
  
  yyyy let(:subscription) { mock(:subscription) }
  zzz current_user.stub_chain(:subscriptions, :find) { subscription }
  
  
  let(:en_att) {{
    "id" => 1,
    "iso_code" => "en",
    "name" => "English"
  }}
  let(:reg_attr) {{
    "id" => 1,
    "name" => "registration",
    
  }}
  let(:reg_v1_attr) {{
    "id" => 1,
    "calmapp_id" => 1,
    "version" => "1"
  }}
  let( :valid_cavs_t_l_attr) {{
    "calmapp_version_id" => 1,
    "translation_language_id" => 1
  }}
  let(:valid_attributes) { { 
    "description" => "test desc",
    "yaml_upload" => "en.yml",
    "cavs_translation_language" =>  valid_cavs_t_l
    #"calmapp_versions_translation_language" => CalmappVersionsTranslationLanguage.find_by(:translation_language_id => 1)
    
    } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TranslationsUploadsController. Be sure to keep this updated too.
  let(:valid_session) { {} }
  before 
  describe "GET index" do
    it "assigns all translations_uploads as @translations_uploads" do
      binding.pry
      translations_upload = TranslationsUpload.create! valid_attributes
      
      get :index, {}, valid_session
      assigns(:translations_uploads).should eq([translations_upload])
    end
  end

  describe "GET show" do
    it "assigns the requested translations_upload as @translations_upload" do
      translations_upload = TranslationsUpload.create! valid_attributes
      get :show, {:id => translations_upload.to_param}, valid_session
      assigns(:translations_upload).should eq(translations_upload)
    end
  end

  describe "GET new" do
    it "assigns a new translations_upload as @translations_upload" do
      get :new, {}, valid_session
      assigns(:translations_upload).should be_a_new(TranslationsUpload)
    end
  end

  describe "GET edit" do
    it "assigns the requested translations_upload as @translations_upload" do
      translations_upload = TranslationsUpload.create! valid_attributes
      get :edit, {:id => translations_upload.to_param}, valid_session
      assigns(:translations_upload).should eq(translations_upload)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new TranslationsUpload" do
        expect {
          post :create, {:translations_upload => valid_attributes}, valid_session
        }.to change(TranslationsUpload, :count).by(1)
      end

      it "assigns a newly created translations_upload as @translations_upload" do
        post :create, {:translations_upload => valid_attributes}, valid_session
        assigns(:translations_upload).should be_a(TranslationsUpload)
        assigns(:translations_upload).should be_persisted
      end

      it "redirects to the created translations_upload" do
        post :create, {:translations_upload => valid_attributes}, valid_session
        response.should redirect_to(TranslationsUpload.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved translations_upload as @translations_upload" do
        # Trigger the behavior that occurs when invalid params are submitted
        TranslationsUpload.any_instance.stub(:save).and_return(false)
        post :create, {:translations_upload => { "translation_language_id" => "invalid value" }}, valid_session
        assigns(:translations_upload).should be_a_new(TranslationsUpload)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        TranslationsUpload.any_instance.stub(:save).and_return(false)
        post :create, {:translations_upload => { "translation_language_id" => "invalid value" }}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested translations_upload" do
        translations_upload = TranslationsUpload.create! valid_attributes
        # Assuming there are no other translations_uploads in the database, this
        # specifies that the TranslationsUpload created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        TranslationsUpload.any_instance.should_receive(:update_attributes).with({ "translation_language_id" => "1" })
        put :update, {:id => translations_upload.to_param, :translations_upload => { "translation_language_id" => "1" }}, valid_session
      end

      it "assigns the requested translations_upload as @translations_upload" do
        translations_upload = TranslationsUpload.create! valid_attributes
        put :update, {:id => translations_upload.to_param, :translations_upload => valid_attributes}, valid_session
        assigns(:translations_upload).should eq(translations_upload)
      end

      it "redirects to the translations_upload" do
        translations_upload = TranslationsUpload.create! valid_attributes
        put :update, {:id => translations_upload.to_param, :translations_upload => valid_attributes}, valid_session
        response.should redirect_to(translations_upload)
      end
    end

    describe "with invalid params" do
      it "assigns the translations_upload as @translations_upload" do
        translations_upload = TranslationsUpload.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        TranslationsUpload.any_instance.stub(:save).and_return(false)
        put :update, {:id => translations_upload.to_param, :translations_upload => { "translation_language_id" => "invalid value" }}, valid_session
        assigns(:translations_upload).should eq(translations_upload)
      end

      it "re-renders the 'edit' template" do
        translations_upload = TranslationsUpload.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        TranslationsUpload.any_instance.stub(:save).and_return(false)
        put :update, {:id => translations_upload.to_param, :translations_upload => { "translation_language_id" => "invalid value" }}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested translations_upload" do
      translations_upload = TranslationsUpload.create! valid_attributes
      expect {
        delete :destroy, {:id => translations_upload.to_param}, valid_session
      }.to change(TranslationsUpload, :count).by(-1)
    end

    it "redirects to the translations_uploads list" do
      translations_upload = TranslationsUpload.create! valid_attributes
      delete :destroy, {:id => translations_upload.to_param}, valid_session
      response.should redirect_to(translations_uploads_url)
    end
  end

end
